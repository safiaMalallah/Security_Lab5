import java.security.Permission;
import java.security.Permissions;
import java.util.HashMap;  
import java.util.List;  
import java.util.Map;
import java.util.Scanner;

import org.jnetpcap.Pcap;  
import org.jnetpcap.nio.JMemory;  
import org.jnetpcap.packet.JFlow;  
import org.jnetpcap.packet.JFlowKey;  
import org.jnetpcap.packet.JFlowMap;  
import org.jnetpcap.packet.JPacket;  
import org.jnetpcap.packet.JPacketHandler;  
import org.jnetpcap.packet.JScanner;  
import org.jnetpcap.packet.PcapPacket;
import org.jnetpcap.packet.PcapPacketHandler;
import org.jnetpcap.protocol.tcpip.Http;  
import org.jnetpcap.protocol.tcpip.Tcp;
import org.jnetpcap.util.PcapPacketArrayList; 

public class ids {

	
		// TODO Auto-generated method stub
		 
		public static void main(String[] args) {
			String name1,name2;
		      
		     /*
		       Scanner in = new Scanner(System.in);
		       System.out.println("Enter Policy Name:");
		       name1 = in.nextLine();
		       System.out.println("Enter .pcap trace file Name:");
		       name2=in.nextLine();
		       in.close();    
		       */
		       
		//	readOfflineFiles(name1,name2) ;
			readOfflineFiles2("trace1.pcap","trace1.pcap");
		}
		
 public static PcapPacketArrayList readOfflineFiles(String n1 , String n2) 
		  {
		
			final String FileAddress = "trace1.pcap";  
			
			 final StringBuilder errbuf = new StringBuilder();
			 Pcap pcap = Pcap.openOffline(FileAddress, errbuf);
			 if (pcap == null) {  
				              try {
								throw new Exception(errbuf.toString());
							} catch (Exception e) {
								// TODO Auto-generated catch block
								e.printStackTrace();
							} 
				          }
			 
			 
			 PcapPacketHandler<PcapPacketArrayList> jpacketHandler = new PcapPacketHandler<PcapPacketArrayList>() {  
				          
				               public void nextPacket(PcapPacket packet, PcapPacketArrayList PaketsList) {  
				    
				                  PaketsList.add(packet);
				               }  
				          };
				          
				          
				          try {  
				        	            PcapPacketArrayList packets = new PcapPacketArrayList();
				        	            pcap.loop(-1,jpacketHandler,packets);
				        	            
				        	             return packets;
				        	            } finally {  
				        	              //Last thing to do is close the pcap handle 
				        	             pcap.close();  
				        	         } 
			
			
		}
	
		 public static  void readOfflineFiles2(String FILENAME  , String n2){
			 
			 final StringBuilder errbuf = new StringBuilder();  
			  
		        final Pcap pcap = Pcap.openOffline(FILENAME, errbuf);  
		        if (pcap == null) {  
		            System.err.println(errbuf); // Error is stored in errbuf if any  
		            return;  
		        }  
		  
		           pcap.loop(10, new JPacketHandler<StringBuilder>() {  
		  
		          
		            final Tcp tcp = new Tcp();  
		  
		           
		            final Http http = new Http();  
		  
		        
		        
		        
		        
		        
		            public void nextPacket(JPacket packet, StringBuilder errbuf) {  
		            	  
		               
		                if (packet.hasHeader(Tcp.ID)) {  
		  
		                    
		                    packet.getHeader(tcp);  
		  
		                    System.out.printf("tcp.dst_port=%d%n", tcp.destination());  
		                    System.out.printf("tcp.src_port=%d%n", tcp.source());  
		                    System.out.printf("tcp.ack=%x%n", tcp.ack());  
		  
		                }  
		  
		                
		                if (packet.hasHeader(tcp)) {  
		                    System.out.printf("tcp header::%s%n", tcp.toString());  
		                }  
		  
		             
		                if (packet.hasHeader(tcp) && packet.hasHeader(http)) {  
		                 
		  
		                    System.out.printf("http header::%s%n", http);  
		  
		                   
		                }  
		  
		                System.out.printf("frame #%d%n", packet.getFrameNumber());  
		            }  
		  
		        }, errbuf);  
		  
		       
		        JScanner.getThreadLocal().setFrameNumber(0);  
		  
		        final PcapPacket packet = new PcapPacket(JMemory.POINTER);  
		        final Tcp tcp = new Tcp();  
		  
		        for (int i = 0; i < 5; i++) {  
		            pcap.nextEx(packet);  
		  
		            if (packet.hasHeader(tcp)) {  
		                System.out.printf("#%d seq=%08X%n", packet.getFrameNumber(), tcp.seq());  
		            }  
		        }  
		  
		        
		        final Map<JFlowKey, JFlow> flows = new HashMap<JFlowKey, JFlow>();  
		  
		        for (int i = 0; i < 50; i++) {  
		            pcap.nextEx(packet);  
		            final JFlowKey key = packet.getState().getFlowKey();  
		  
		           
		            JFlow flow = flows.get(key);  
		            if (flow == null) {  
		                flows.put(key, flow = new JFlow(key));  
		            }  
		  
		           
		            flow.add(new PcapPacket(packet));  
		        }  
		  
		        
		  
		        for (JFlow flow : flows.values()) {  
		  
		           
		            if (flow.isReversable()) {  
		              
		                List<JPacket> forward = flow.getForward();  
		                for (JPacket p : forward) {  
		                    System.out.printf("%d, ", p.getFrameNumber());  
		                }  
		                System.out.println();  
		  
		                List<JPacket> reverse = flow.getReverse();  
		                for (JPacket p : reverse) {  
		                    System.out.printf("%d, ", p.getFrameNumber());  
		                }  
		            } else {  
		  
		               
		                for (JPacket p : flow.getAll()) {  
		                    System.out.printf("%d, ", p.getFrameNumber());  
		                }  
		            }  
		            System.out.println();  
		        }  
		  
		        /* 
		         * We still haven't read all the packets from our offline file. Here is an 
		         * easier way to retrieve all the packets while grouping them into flows. 
		         * jNetPcap provides a neat little class that does all of the above work for 
		         * us. Its called JFlowMap, not only that it implements a JPacketHandler 
		         * interface suitable for usage with Pcap.loop or Pcap.dispatch calls and it 
		         * will add all packets received into appropriate flows. 
		         */  
		        JFlowMap superFlowMap = new JFlowMap();  
		  
		        /* 
		         * So lets finish this file off, and read the remaining packets into our new 
		         * superFlowMap and do a pretty print of all the flows it finds. The 3rd 
		         * argument to Pcap.loop is unused so we just set it to null. 
		         * Pcap.LOOP_INFINITE flag tells the Pcap.loop method to read all the 
		         * packets until the end of file. Since we already read some packets, this 
		         * will read remaining packets from the current position in the file until 
		         * the end. 
		         */  
		        pcap.loop(Pcap.LOOP_INFINITE, superFlowMap, null);  
		  
		        System.out.printf("superFlowMap::%s%n", superFlowMap);  
		  
		        /* 
		         * Now we have read the remaining packets and we no longer need to keep the 
		         * pcap file open. 
		         */  
		        pcap.close();  
		        
		        
		        
		      
		 
		        
		 
		 
		 
		 
		 }}
		 
	
