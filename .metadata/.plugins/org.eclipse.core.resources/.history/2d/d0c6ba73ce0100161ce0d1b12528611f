

import java.util.Scanner;

import javax.swing.JOptionPane;
import javax.xml.ws.spi.http.HttpExchange;
import javax.xml.ws.spi.http.HttpHandler;

import java.awt.Window;
import java.io.IOException;
import java.util.HashMap;
import java.util.Map;

import org.jnetpcap.Pcap;
import org.jnetpcap.packet.JPacket;
import org.jnetpcap.packet.JPacketHandler;
import org.jnetpcap.packet.JRegistry;
import org.jnetpcap.packet.Payload;
import org.jnetpcap.protocol.network.Ip4;
import org.jnetpcap.protocol.tcpip.Http;
import org.jnetpcap.protocol.tcpip.Tcp;
import org.jnetpcap.protocol.voip.Sip.ContentType;


  
import org.jnetpcap.packet.TestUtils;  
import org.jnetpcap.packet.analysis.JController;  
import org.jnetpcap.protocol.tcpip.Http.ContentType;  
import org.jnetpcap.protocol.tcpip.Http.Request;  
import org.jnetpcap.protocol.tcpip.Http.Response; 


public class ids {
	public static void main(String[] args) {
		
		boolean con = true;
		/*
		while(con)
		{
		Scanner reader = new Scanner(System.in);  // Reading from System.in
		System.out.println("Select Policy:\n1. Blame Attack 1\n2. Blame Attack 2\n3. General Buffer Overflow\n4. Plaintext POP\n5. Simulated  ");
		String n = reader.next(); 
		System.out.println("Select file:\n1.trace1.pcap \n2.trace2.pcap \n3.trace3.pcap \n4.trace4.pcap \n5.trace5.pcap ");
		String n2 = reader.next(); 
		
		 n = "1";
		 n2 = "1";
		*/
//	IDS("trace" + n2 + ".pcap", Integer.parseInt(n));
		
		if (false)
		{
			//2-3
			//statfull
		//	IDSf("trace1.pcap", 1);
		}
		else
		{
			//1 4 5
			//statless
			IDS_Statless("trace1.pcap", 1);
		}
		
		
		/*
		System.out.println("Press N to exist, or any char to continue");
		String temp = reader.next(); 
		
		if (temp.equals("N"))
		{
			con = false ;
			System.out.println("Thank you and Goodbye");
		}
	
		}
		*/
	}
	//net
	public static void IDS_Statfull(String n1, int policy)	
	{
		HttpAnalyzer httpAnalyzer = JRegistry.getAnalyzer(HttpAnalyzer.class);  
	    httpAnalyzer.add(new HttpHandler() {  
	  
	        /* 
	         * Step 2 - our handler routine. 
	         */  
	        public void processHttp(Http http) {  
	  
	            System.out.printf("\n#%d %s", http.getPacket().getFrameNumber(), http  
	                .toString());  
	  
	            /* 
	             * Http is normal http header that has been decoded. 
	             */  
	            if (http.getMessageType() != Http.MessageType.RESPONSE) {  
	                return;  
	            }  
	  
	            /* 
	             * Responses always have a content type, since we are looking for 
	             * specific content that has been predefined, we can use enum constants. 
	             * We're not interested in anything else, otherwise we'd have to use 
	             * http.contentType() method which returns a string. 
	             */  
	            ContentType type = http.contentTypeEnum();  
	            if (type != ContentType.JPEG) {  
	                return;  
	            }  
	  
	            switch (type) {  
	                case JPEG:  
	                    /* 
	                     * Image header is already defined under tests source tree, but we 
	                     * can't really use it for our example yet. 
	                     */  
	                    // Image jpeg = http.getPacket().getHeader(new Image());  
	                    break;  
	  
	                default:  
	                    System.out.printf("Unknown content type %s\n", type);  
	            }  
	        }

			@Override
			public void handle(HttpExchange arg0) throws IOException {
				// TODO Auto-generated method stub
				
			}  
	  
	    });  
	  
	    /* 
	     * Step 3 - normal open capture file stuff 
	     */  
	    StringBuilder errbuf = new StringBuilder();  
	    Pcap pcap = Pcap.openOffline(TestUtils.HTTP, errbuf);  
	    if (pcap == null) {  
	        System.err.println(errbuf.toString());  
	        System.exit(1);  
	    }  
	  
	    /* 
	     * Step 4 - We enter our loop. The main thing to consider is that we are 
	     * passing JController as the primary handler for libpcap packets. Notice 
	     * JController is registered with JRegistry. It knows how to pass packets on 
	     * to other analyzers, especially the HttpAnalyzer in our case. We could add 
	     * a JPacketHandler as a listener to JController, which would pass on 
	     * regular packets back to us, after they have been analyzed. This is the 
	     * same, as if we registered our handler directly with the loop. All packets 
	     * will be passed back to us. There are however few differenced. The main 
	     * difference is that packet returned from JController as opposed to 
	     * directly from the Pcap.loop or dispatch methods, is that JController may 
	     * have buffered them, while analyzers where working through the stream of 
	     * packets. Once the appropriate release signals were sent by any analyzer 
	     * that had a hold on JController's outbound queue, all the packets are 
	     * fetched to JPacketHandler listeners as the outboud queue is drained. In 
	     * our example we chose to work with HttpAnalyzer directly and its 
	     * HttpHandler, which is more specific to http protocol. 
	     */  
	    pcap.loop(Pcap.LOOP_INFINATE, JRegistry.getAnalyzer(JController.class),  
	        null);  
	  
	    /* 
	     * Always close the pcap handle after we are done 
	     */  
	    pcap.close();  
		
	}
	//me
	public static void IDS_Statless(String n1, int policy)	
	{
		policy p = new policy(policy)  ;
		//int sa = tt.xx();
		
		final String FILENAME = n1;
		final StringBuilder errbuf = new StringBuilder();

		final Pcap pcap = Pcap.openOffline(FILENAME, errbuf);
		if (pcap == null) {
			//System.err.println(errbuf); 
			return;
		}
		Map<String, Integer> ScrMap = new HashMap<String, Integer>();
		Map<String, Integer> DesMap = new HashMap<String, Integer>();


		pcap.loop(Pcap.LOOP_INFINITE, new JPacketHandler<StringBuilder>() {
			final Tcp tcp = new Tcp();
			final Ip4 ip = new Ip4();
						
			public void nextPacket(JPacket packet, StringBuilder errbuf) {
				//cleanPacket
				p.CleanP();
				
						
				
					
				
				if (packet.hasHeader(Tcp.ID) && packet.hasHeader(Ip4.ID)) {
					
				//	System.out.println(packet);
					
					Payload payload = new Payload();
					
					
					packet.getHeader(tcp);
					
					//System.out.printf("tcp.dst_port=%d%n", tcp.destination());
					//System.out.printf("tcp.src_port=%d%n", tcp.source());
					//System.out.printf("tcp.ack=%x%n", tcp.ack());
					
					//add to obj
					 p.cattacker_port = tcp.source() + "";
		             p.chost_port = tcp.destination() + "";
					
		     
					
		             packet.getHeader(ip);
		             byte[] dIP = new byte[4], sIP = new byte[4];
		             dIP = packet.getHeader(ip).destination();
		             sIP = packet.getHeader(ip).source();
		             String sourceIP = org.jnetpcap.packet.format.FormatUtils.ip(sIP);
		             String destinationIP = org.jnetpcap.packet.format.FormatUtils.ip(dIP);
		          //   System.out.println(sourceIP);
		          //   System.out.println(destinationIP);
		            
		             
		             //add to obj
		             p.cattacker = sourceIP;
		             p.chost = destinationIP;
		             
		         
/*
 * 
 */////////////
		          
		             
		             System.out.println("From: ip: " + p.cattacker + " Port:" + p.cattacker_port + " \nTo :  ip " + p.chost  + " port:"+p.chost_port + "" );
		             
		             
		             if (packet.hasHeader(payload)) {
		            //	 System.out.printf("payload length=%d\n", payload.getLength());
		            	 byte[] payloadContent = payload.getByteArray(0, payload.size());
		            	 String strPayloadContent = new String(payloadContent);
		     	// System.out.println("payload content = [" + strPayloadContent + "] end \n\n");
		            	 
		             
		             if ( strPayloadContent.contains(p.to_host) && true)
		             {
		            	 JOptionPane.showMessageDialog(null, p.name); 
		            	
		            	// System.out.println( p.to_host + "      check         "+strPayloadContent + "\n endddddddddddddddddddddddddddddddddddd \n\n");
		             }
		             }
		             
		             //check
		             
		             ///////////////
		             
		              //  System.out.printf("tcp.ip_src=%s%n",sourceIP);
		                //System.out.printf("tcp.ip_dest=%s%n",destinationIP);*/
		             
		             if (tcp.flags_SYN()) {  
		                if(!ScrMap.containsKey(sourceIP)){ 
							ScrMap.put(sourceIP,1);
						}
						else{
							int TempValue = ScrMap.get(sourceIP);
							TempValue ++;
							ScrMap.put(sourceIP, TempValue);
						}
		                
						if(!DesMap.containsKey(destinationIP)){ 
							DesMap.put(destinationIP,1);
						}
						else{
							int TempValue = DesMap.get(destinationIP);
							TempValue ++;
							DesMap.put(destinationIP, TempValue);
						}
		                
		             }   	 
					
             }

			}

		}, errbuf);
	
	

	}
}
 class  policy
{
	int id;
	String host;
	String name;
	String type;
	String proto;
	String host_port;
	String attacker_port;
	String attacker;
	String to_host;
	String from_host;
	String to_host2;
	String from_host2;
	String from_host3;
	
	String chost;

	String ctype;
	String cproto;
	String chost_port;
	String cattacker_port;
	String cattacker;
	String cto_host;
	String cfrom_host;
	String cto_host2;
	String cfrom_host2;
	String cfrom_host3;
	
	policy(int id)
	{
		this.id = id;
		
		switch (id) {
        case 1: 
        	name="Blame Attack 1";
        	type="stateless";
        	proto="tcp";
        	host_port="5551";
        	attacker_port="any";
        	attacker="any";
        	to_host="Now I own your computer";
        	break;
        case 2: 
        	host="192.168.0.1";
        	name="Blame Attack 2" ;
        	type="stateful";
        	host_port="5551";
        	attacker_port="any";
        	attacker="any";
        	to_host="Now I own your computer";
            break;
        case 3:  
        	host="192.168.0.1";
        	name="Buffer Overflow";
        	type="stateful";
        	host_port="5551";
        	attacker_port="any";
        	attacker="any";
        	to_host="\\x90{10}.*\\xcd\\x80";            	
        	break;
        case 4: 
        	host="192.168.0.1";
        	name="Plaintext POP";
        	type="stateless";
        	proto="tcp";
        	host_port="110";
        	attacker_port="any";
        	attacker="any";
        	from_host="\\+OK.*\\r\\n";
        	to_host="USER .*\\r\\n";
        	from_host="\\+OK.*\\r\\n";
        	to_host="PASS.*\r\n";
        	from_host="\\+OK.*\\r\\n";	
        break;
        case 5: 
        	host="192.168.0.1";
        	name="TFTP attacker boot";
        	type="stateless";
        	proto="udp";
        	host_port="any";
        	attacker_port="69";
        	attacker="any";
        	from_host="vmlinuz";
        	to_host="\\x00\\x03\\x00\\x01";
        break;
        default: break;
      
    }
   
			
	}

	public  void CleanP()
	{
		 chost = "";
	
		 ctype= "";
		 cproto= "";
		 chost_port= "";
		 cattacker_port= "";
		 cattacker= "";
		 cto_host= "";
		 cfrom_host= "";
		 cto_host2= "";
		 cfrom_host2= "";
		 cfrom_host3= "";
		
	}
  public int xx()
{
	return 1;
	
}

}

